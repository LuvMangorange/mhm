#!/bin/bash
set -e
#
# -------------------------------------------------------------------------------------------
# BRIEF
# -------------------------------------------------------------------------------------------
#
# Runs mHM with different settings specified in namelists.
#
#     $ ./check_mhm_cases
#
# This script has to be run successfully without failure statements before
# a new feature is merged back to the trunk of mHM.
#
# -------------------------------------------------------------------------------------------
# DETAILS
# -------------------------------------------------------------------------------------------
#
# To run all the test cases on (s)ystem "eve" with (c)ompiler "nag53" in (r)elease mode "debug"
# type

#      $ cd check/
#      $ ./check_mhm_cases -s eve -c nag53 -r debug

# on your command line. If test case was running properly, i.e. is
# consistent with the pre-defined output, command line output will be

#      $     ###########################
#      $     #     case_[id]  o.k.     #
#      $     ###########################
#      $     using
#      $        System:   eve
#      $        Compiler: nag53
#      $        Release:  debug

# otherwise, if the test scenario failed either during runtime or
# because of inconsistent output

#      $     ###########################
#      $     #     case_[id]  failed   #
#      $     ###########################
#      $     using
#      $        System:   eve
#      $        Compiler: nag53
#      $        Release:  debug

# will be written on standard output. Additionally, you will find a file
# mhm.output in each specific test case folder case_[id]/ containing the
# mHM print-outs. Inspecting this file might help you to find the reason
# of failure. Only if all test cases pass the make test, a new feature
# of mHM is allowed to be merged back to the trunk which consists of two
# steps:

# (1) Update your branch to current status of the trunk, i.e.
#     include features already apparent in the trunk but not your branch

#      $ cd my-branch/
#      $ svn merge https://svn.ufz.de/svn/mhm/trunk
#      $ svn commit -m "mhm: branches: my-branch: I have the current trunk \
#                       in my branch and solved all conflicts"

# (2) Merge your branch to the trunk

#      $ cd trunk/
#      $ svn merge --reintegrate https://svn.ufz.de/svn/mhm/branches/my-branch
#      $ svn commit -m "mhm: trunk: successfully integrated feature \
#                       <this-is-the-feature>"

# Please be aware that the test cases only include switches specified
# within a namelist. This means that you should run "./check_mhm_cases" with
# different compilers and in release/debug. These settings can be made
# by using the optional arguments of check_mhm_cases, i.e. "-c", "-r", "-s".

# All tests will be performed first in sequential mode and repeated with
# openmp parallelization. The test cases specified so far are:

#    case 0 :: DEFAULT

#    case 1 :: RESTART READING AND WRITING
#       restart_flag_states_read   = .TRUE.          (default: .FALSE.)
#       restart_flag_states_write  = .TRUE.          (default: .TRUE. )
#       restart_flag_config_read   = .TRUE.          (default: .FALSE.)
#       restart_flag_config_write  = .TRUE.          (default: .TRUE. )

#    case 2 :: ROUTING DEACTIVATED
#       processCase(8) = 0                           (default: 1)

#    case 3 :: OPTIMIZATION ACTIVATED
#       optimize       = .TRUE.                      (default: .FALSE.)
#       opti_method    = 1                           (default: 3      )
#       nIterations    = 6                           (default: 400    )

#    case 4 :: MULTISCALE  
#        nBasins                 = 4		     (default: nBasins                 = 2)
#        resolution_Hydrology(1) = 24000 	     (default: resolution_Hydrology(1) = 24000 )
#        resolution_Hydrology(2) = 12000	     (default: resolution_Hydrology(1) = 24000 )
#        resolution_Hydrology(3) = 24000 	     (default: )
#        resolution_Hydrology(4) = 12000	     (default: )
#        resolution_Routing(1)   = 24000 	     (default: resolution_Routing(1)   = 24000)
#        resolution_Routing(2)   = 12000	     (default: resolution_Routing(2)   = 24000)
#        resolution_Routing(3)   = 24000	     (default: )
#        resolution_Routing(4)   = 12000	     (default: )
#        L0Basin(1)              = 1		     (default: )
#        L0Basin(2)              = 1		     (default: )
#        L0Basin(3)              = 2		     (default: )
#        L0Basin(4)              = 3		     (default: )
#        nGaugesTotal            = 4		     (default: nGaugesTotal            = 2)
#        NoGauges_basin(3)       = 1 		     (default: )
#        Gauge_id(3,1)           = 398 	             (default: )
#        Gauge_filename(3,1)     = "00398.txt"       (default: )
#        NoGauges_basin(4)       = 1		     (default: )
#        Gauge_id(4,1)           = 398 	             (default: )
#        Gauge_filename(4,1)     = "00398.txt"       (default: )
#        + adjust basin wise directory paths according to the multiscale setup:
#        dir_Out(1)          	   = "output_b1/b1_" (default: "output_b1/")
#        dir_RestartOut(1)       = "output_b1/b1_"   (default: "output_b1/")
#        dir_LatLon(2)           = "../../test_basin/input/latlon/latlon_2.nc" (default: latlon_1.nc )
#        dir_Out(2)              = "output_b1/b2_"   (default: "output_b1/")
#        dir_RestartOut(2)       = "output_b1/b2_"   (default: "output_b1/")
#        dir_LatLon(3)           = "../../test_basin/input/latlon/latlon_1.nc" (default: )
#        dir_Out(3)              = "output_b1/b3_"   (default: )
#        dir_RestartOut(3)       = "output_b1/b3_"   (default: )
#        dir_LatLon(4)           = "../../test_basin/input/latlon/latlon_2.nc" (default: )
#        dir_Out(4)              = "output_b1/b4_"   (default: )
#        dir_RestartOut(4)       = "output_b1/b4_"   (default: )

#    case 5 :: INFLOW GAUGE
#        nInflowGaugesTotal	    = 1              (default: nInflowGaugesTotal            = 0)
#        NoInflowGauges_basin(1)    = 1              (default: NoInflowGauges_basin(1)       = 0)
#        InflowGauge_id(1,1)        = 333            (default: InflowGauge_id(1,1)           = 398)
#        InflowGauge_filename(1,1)  = "00333.txt"    (default: InflowGauge_filename(1,1)     = "00398.txt")
#        dir_Out(1)          	    = "output_b1/b1_"(default: "output_b1/")
#        dir_RestartOut(1)          = "output_b1/b1_"(default: "output_b1/")
#        dir_Out(2)                 = "output_b1/b2_"(default: "output_b1/")
#        dir_RestartOut(2)          = "output_b1/b2_"(default: "output_b1/")

# -------------------------------------------------------------------------------------------
# Written  Feb 2014 Juliane Mai
# Modified Feb 2014 Matthias Cuntz                 - lots of small changes
#          Mar 2014 Stephan Thober, Matthias Cuntz - added OpenMP test
#          May 2014 Matthias Cuntz                 - specify compiler during clean

# -------------------------------------------------------------------------------------------
#
# Copyright 2014 Juliane Mai, Matthias Cuntz, Stephan Thober
#
# License
# This file is part of the UFZ CHS mesoscale hydrologic model mHM.
#
# The UFZ CHS mesoscale hydrologic model mHM is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The UFZ CHS mesoscale hydrologic model mHM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.

# ---------------------------------------------------------------------------------------------------------------------
# Start
#

#
# Perform a cleanup if script is interupted
# trap cleanup 1 2 3 6  # output and error messages will be lost
#
prog=$0
pprog=$(basename ${prog})
dprog=$(dirname ${prog})
isdir=${PWD}
pid=$$

# ---------------------------------------------------------------------------------------------------------------------
# Functions
#

function usage () {
    printf "${pprog} [-h] [-c compiler] [-r release] [-s system] [-t threads] [clean]\n"
    printf "Check mHM for different scenarios (case_* folders).\n"
    printf "The settings (s)ystem, (c)ompiler and (r)elease, which are used by the Makefile, can be specified optionally.\n"
    printf "\n"
    printf "Input\n"
    printf "    clean | cleanup | cleanclean    Runs only the cleanup function.\n"
    printf "\n"
    printf "Options\n"
    printf "    -h     Prints this help screen.\n"
    printf "    -c     Compilers used to generate a mHM executable, e.g. 'gnu'\n"
    printf "           'all' loops over all compilers found on the system\n"
    printf "           (Default: all)\n"
    printf "    -r     Release or debug mode, e.g. 'release'\n"
    printf "           'all' or 'both' loop over debug and release\n"
    printf "           (Default: all)\n"
    printf "    -s     System on which mHM will be compiled, e.g. 'eve'\n"
    printf "           (Default: eve).\n"
    printf "    -t     Number of threads for OpenMP, e.g. 6\n"
    printf "           Set to '' for deactivation of parallel test\n"
    printf "           (Default: 2).\n"
    printf "\n"
    printf "Example\n"
    printf "    ${pprog} -c gnu45 -s eve -r debug -t 1\n"
}

# cleanup at end and when interupted
function cleanup ()
{
    # exe
    cd ${isdir}
    rm -f 'mhm_for_check'

    # everything in case_?? dirs
    case_dirs=$(ls -d case_*)
    rmfiles="dds_results.out ${mhm_exe} cdo.*.terminal mhm_terminal.*.out"
    rmdirs="output_b1 output_b2"

    # using brace expansion

    # old ${pid} not known when called "./check_mhm_cases clean" --> include in ${rmfiles}
    # eval rm -f {$(echo ${case_dirs} | tr ' ' ',')}/*.${pid}.*
    for i in $(echo ${rmfiles}) ; do eval rm -f {$(echo ${case_dirs} | tr ' ' ',')}/${i}   ; done
    for i in $(echo ${rmdirs})  ; do eval rm -f {$(echo ${case_dirs} | tr ' ' ',')}/${i}/* ; done

    # make cleanclean
    cd ..
    if [[ "z${compiler}" == "z" ]] ; then compiler=$(echo ${compilers} | cut -f 1 -d ' ') ; fi
    make system=${system} compiler=${compiler} PROGNAME=${mhm_exe} cleanclean > /dev/null
}

# ---------------------------------------------------------------------------------------------------------------------
# Checks and Switches
#

# name of the mhm executable
mhm_exe='mhm_for_check'

# switches
compilers='all'
system='eve'
release='all'
threads=2
while getopts "c:hr:s:t:" Option ; do
    case ${Option} in
        h) usage 1>&2; exit 0;;
        c) compilers="${OPTARG}";;
        r) release="${OPTARG}";;
        s) system="${OPTARG}";;
        t) threads="${OPTARG}";;
        *) printf "Error ${pprog}: unimplemented option.\n\n";  usage 1>&2; exit 1;;
    esac
done
shift $((${OPTIND} - 1))

# check for compilers on system
compilers=$(echo ${compilers} | tr [A-Z] [a-z])
if [[ "${compilers}" == "all" ]] ; then
    compilers=$(ls ../make.config/${system}.* | grep -v 'alias' | grep -v 'gnu41' | grep -v 'gnu44' | grep -v 'sun12' | cut -d '/' -f 3 | cut -d '.' -f 2)
    # compilers=$(ls ../make.config/${system}.* | grep -v 'alias' | grep -v 'gnu41' | grep -v 'gnu44' | cut -d '/' -f 3 | cut -d '.' -f 2)
fi

# argument
if [ $# -gt 0 ] ; then
    # currently the only argument possible is "clean"
    case ${1} in
        clean*) cleanup; exit 0;;
        *) printf "Error ${pprog}: unknown argument.\n\n";  usage 1>&2; exit 1;;
    esac
fi

# check for cdo
set +e
icdo=$(which cdo)
if [[ "${icdo}z" == "z" ]] ; then
    if [[ ${system} == "eve" ]] ; then
        echo '   try to load module cdo ...'
        source /etc/profile.d/000-modules.sh
        module load cdo
        icdo=$(which cdo)
    fi
fi
set -e
if [[ "${icdo}z" == "z" ]] ; then printf "Error ${pprog}: cdo not found.\n\n" ; exit 1 ; fi

# rm coloured ls
if [[ -n ${CLICOLOR_FORCE} ]] ; then unset CLICOLOR_FORCE ; fi

# releases
release=$(echo ${release} | tr [A-Z] [a-z])
if [[ "${release}" == "both" || "${release}" == "all" ]] ; then
    release=$(echo debug release)
fi

# system
system=$(echo ${system} | tr [A-Z] [a-z])

# ---------------------------------------------------------------------------------------------------------------------
# Do Tests
#
for irelease in ${release} ; do
    for thread in 0 ${threads} ; do
        for compiler in ${compilers} ; do
            # Compile mHM
            cd ..
            echo '   ### COMPILING ###'
            echo '   using System:   '${system}
            echo '         Compiler: '${compiler}
            echo '         Release:  '${irelease}
            make system=${system} compiler=${compiler} release=${irelease} PROGNAME=${mhm_exe} openmp= clean > /dev/null
            if [[ ${thread} -eq 0 ]] ; then
		echo '         OpenMP:   False'
		make system=${system} compiler=${compiler} release=${irelease} PROGNAME=${mhm_exe} openmp= > /dev/null
            else
		echo '         OpenMP:   True'
		echo '         Threads:  '${thread}
		make system=${system} compiler=${compiler} release=${irelease} PROGNAME=${mhm_exe} openmp=true > /dev/null
		export OMP_NUM_THREADS=${thread}
            fi

	    # run checks
            cd check
            case_dirs=$(\ls -d case_*)
            #case_dirs=$(\ls -d case_00)

            nRecordsDiffer_allCases=0
            for case_dir in ${case_dirs} ; do
                echo ''
                echo '##############################################################################################'
                echo '#                                 '${case_dir}' will be checked ...                                #'
                echo '##############################################################################################'
                echo ''
                cd ${case_dir}

                # remove old exe and link recently compiled
                if [ -f ${mhm_exe} ] ; then rm ${mhm_exe} ; fi
                ln -s ../../${mhm_exe}

                # run mhm
                echo '   mhm is running ...'
                ./${mhm_exe} > mhm_terminal.${pid}.out

                # mhm was running till the end?
                found=$(grep 'mHM: Finished!' mhm_terminal.${pid}.out)
                if [[ ${found} == 'mHM: Finished!' ]] ; then
                    # compare outputs in output_b1/ with reference in output_save/
                    nRecordsDiffer=0
                    cd output_save
                    nc_files=$(ls *.nc)
                    cd ..
                    for nc_file in ${nc_files} ; do
                        # cdo -b 16 :: precision=double=16bit
                        echo '   *  cdo diff output_save/'${nc_file}' output_b1/'${nc_file}
                        ${icdo} -s diffn output_save/${nc_file} output_b1/${nc_file} > cdo.${pid}.terminal
                        iRecordsDiffer=$(grep -i 'differ' cdo.${pid}.terminal | tail -1 | cut -f 1 -d 'o')
                        nRecordsDiffer=$((nRecordsDiffer+iRecordsDiffer))
                        nRecordsDiffer_allCases=$((nRecordsDiffer_allCases+iRecordsDiffer))
                        echo '      Number of records that differ more than 0.001: '${iRecordsDiffer}
                        if [[ ${iRecordsDiffer} -gt 0 ]] ; then
                            echo '            -------------------'
                            echo '                  Details '
                            echo '            -------------------'
                            ${icdo} diffn output_save/${nc_file} output_b1/${nc_file}
                            echo '            -------------------'
                        fi
                        echo ''
                    done
                    echo '   Total Number of records that differ more than 0.001: '${nRecordsDiffer}

                    if [[ ${nRecordsDiffer} -eq 0 ]] ; then
                        echo ''
                        echo '   ###########################'
                        echo '   #     '${case_dir}'     o.k.    #'
                        echo '   ###########################'
                        # echo '   using System:   '${system}
                        # echo '         Compiler: '${compiler}
                        # echo '         Release:  '${irelease}
                        echo ''
                    else
                        echo ''
                        echo '   ###########################'
                        echo '   #     '${case_dir}'    failed   #'
                        echo '   ###########################'
                        # echo '   using System:   '${system}
                        # echo '         Compiler: '${compiler}
                        # echo '         Release:  '${irelease}
                        echo ''
                    fi
                    cd ..
                else
                    echo '   mhm was aborted'
                    echo ''
                    echo '   ###########################'
                    echo '   #     '${case_dir}'    failed   #'
                    echo '   ###########################'
                    # echo '   using System:   '${system}
                    # echo '         Compiler: '${compiler}
                    # echo '         Release:  '${irelease}
                    echo ''
                fi

            done # case loop

            if [[ ${nRecordsDiffer_allCases} -gt 0 ]] ; then
                echo ''
                echo '##############################################################################################'
                echo '#     At least one case failed in this comiler setup                                         #'
                echo '#     check_mhm_cases is aborted without cleaning up the output in the case directories,     #'
                echo '#     such that it can be used to identify the bug                                           #'
                echo '##############################################################################################'
                exit 1
            fi

        done # compiler loop
    done # thread loop
done # release loop

# Clean up mhm directory
cleanup
echo ''
echo '##############################################################################################'
echo '#     All cases with the specified compilers were o.k.                                       #'
echo '#     Output is cleaned up.                                                                  #'
echo '##############################################################################################'
echo ''

exit 0
