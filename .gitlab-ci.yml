# to use the env-var "GIT_CLONE_PATH", set the following in
# ./gitlab-runner/config.toml under [[runners]]:
#   [runners.custom_build_dir]
#     enabled = true
# This will prevent git clone conflicts for jobs ran in parallel

stages:
  - info
  - test

show-env-vars:
  stage: info
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
    SEP: "##################################################################"
    S00: "commit date - "
    S01: "project: ${CI_PROJECT_PATH}"
    S02: "branch: ${CI_COMMIT_REF_NAME}"
    S03: "commit: ${CI_COMMIT_SHA}"
    S04: "commit msg: ${CI_COMMIT_MESSAGE}"
    S05: "clone base path: "
    S06: "runner token: ${CI_RUNNER_SHORT_TOKEN}"
  script:
    - echo -e "${SEP}\n${S00}$(date)\n${SEP}\n${S01}\n${S02}\n${S03}\n${S04}\n${SEP}\n${S05}${GIT_CLONE_PATH}\n${S06}\n${SEP}"

compile-gfortran83:
  stage: test
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source moduleLoadScripts/eve.gfortran83
    - source CI-scripts/compile
    - ./mhm
  artifacts:
    paths:
    - mhm

valgrind-mem-check:
  stage: test
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source moduleLoadScripts/eve.gfortran83
    - source CI-scripts/compile_debug
    - module load miniconda/3
    - conda remove -q -y -p ./mhm_env --all
    - conda create -q -y -p ./mhm_env
    - source activate ./mhm_env
    - conda install -q -y -c conda-forge valgrind
    - valgrind --version
    - valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./mhm

valgrind-mem-use:
  when: always
  stage: test
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source moduleLoadScripts/eve.gfortran83
    - source CI-scripts/compile_debug
    - module load miniconda/3
    - conda remove -q -y -p ./mhm_env --all
    - conda create -q -y -p ./mhm_env
    - source activate ./mhm_env
    - conda install -q -y -c conda-forge valgrind
    # patch the ms_print with the right perl path in shebang
    - sed -i '1s,.*,#! '"$(which perl)"',' $(which ms_print)
    # execute mem-use check
    - valgrind --tool=massif --stacks=yes --time-unit=i --massif-out-file=massif.out.0 ./mhm
    - ms_print massif.out.0
  artifacts:
    paths:
    - massif.out.0

check-gnu-serial-debug:
  stage: test
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source CI-scripts/pre_check
    - ./check_mhm_cases -s eve -c gnu -t 0 -r debug

check-gnu-serial-release:
  stage: test
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source CI-scripts/pre_check
    - ./check_mhm_cases -s eve -c gnu -t 0 -r release

check-gnu-parallel-debug:
  stage: test
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source CI-scripts/pre_check
    - ./check_mhm_cases -s eve -c gnu -t 2 -r debug

check-gnu-parallel-release:
  stage: test
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source CI-scripts/pre_check
    - ./check_mhm_cases -s eve -c gnu -t 2 -r release

# TODO: make this work!
# NOT WORKING: easybuild not activatable on gitlab-runner
# --> wrong NetCDF version in use.
# compile-intel18:
#   stage: test
#   variables:
#     GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/mhm/compile-intel18
#   script:
#     - source moduleLoadScripts/eve.intel18
#     - source CI-scripts/compile
#     - ./mhm

# TODO: make this work!
# FAILING at the moment
# -> error while loading shared libraries: libf60rts.so.1
# check-nag-serial-debug:
#   stage: test
#   variables:
#     GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/mhm/check-nag-serial-debug
#   script:
#     - source CI-scripts/pre_check
#     - ./check_mhm_cases -s eve -c nag -t 0 -r debug
