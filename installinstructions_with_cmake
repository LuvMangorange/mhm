# Dependencies:
###############
# - a fortran compiler
# - fitting netcdf-fortran libraries
# - cmake (version >= 3.5)
# - (optional, but makes things much easier) git

# System dependend installation instructions:
#############################################
# Windows:
# ********
# install cygwin with dependencies
# make
# gcc-fortran
# cmake (version >= 3.5)
# libnetcdf-fortran-devel
#
# Ubuntu, Mint and other apt-get based systems with matching repositories:
# ************************************************************************
# sudo apt-get install git # (optional)
# sudo apt-get install gfortran netcdf-bin libnetcdf-dev libnetcdff-dev cmake
#
# Archlinux:
# **********
# sudo pacman -S git # (optional)
# sudo apt-get -S gcc-libs netcdf-fortran cmake
#
# Module systems:
# ***************
# load modules gcc, netcdf-fortran, cmake
# or load modules intel, netcdf-fortran, cmake
# they will have system specific names, environments, etc. Use module spider to find the right packages and the
# right dependencies
# _eve_:
# source gfortran...

# Installation:
###############
# - change to a directory where you want to store the source code
# - clone the corresponding mHM repository into a folder, i.e.
# git clone -b nag_compilation https://git.ufz.de/mhm/mhm.git mHM_test/
#   for cloning it into a folder mHM_test
# create a build directory where you want to store the build, i.e. inside the git source directory
# cd mHM_test
# mkdir build
# change into the build directory
# cd build
# execute cmake with the path to the git source directory
# cmake ..
# if everything worked well a Makefile was created with the corresponding paths. Execute make
# make
# if this also worked fine an executable was created, which has to be moved or copied to the git source directory
# note: one could automatically link the executably inside the git source directory which is not done for two reasons:
# 1. it should never be commited, nothing should be build inside the source directory which we did not do by hand
# 2. the directory where mHM is executed usually is not the source directory but the directory where you want to run
#    your tests. In case of the test setup it is the same, usually it is not
# cd ..
# cp build/mhm .
# on Windows it is called mhm.exe. Run instead
# cp build/mhm.exe .
# now you might execute mHM.
# ./mhm
